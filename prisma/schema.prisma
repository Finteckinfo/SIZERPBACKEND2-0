generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  PROJECT_OWNER
  PROJECT_MANAGER
  EMPLOYEE
}

enum ProjectType {
  PROGRESSIVE
  PARALLEL
}

enum DepartmentType {
  MAJOR
  MINOR
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum PaymentStatus {
  PENDING      // Task created, no payment allocated yet
  ALLOCATED    // Payment amount reserved in escrow
  PROCESSING   // Payment transaction submitted to blockchain
  PAID         // Payment confirmed on blockchain
  FAILED       // Payment transaction failed
  REFUNDED     // Payment returned to escrow
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum UserRoleStatus {
  PENDING
  ACTIVE
  INACTIVE
}

//
// Models
//

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  firstName     String?
  lastName      String?
  avatarUrl     String?
  passwordHash  String?
  walletAddress String?
  roles         UserRole[]
  projectsOwned Project[]       @relation("OwnedProjects")
  // Remove the old managedDepts relation since departments now link to UserRoles
  tasksAssigned Task[]          @relation("EmployeeTasks")
  paymentsMade  Payment[]       @relation("PaymentsMade")
  paymentsRecv  Payment[]       @relation("PaymentsReceived")
  invites       ProjectInvite[]
  taskActivities TaskActivity[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserRole {
  id                    String       @id @default(cuid())
  user                  User         @relation(fields: [userId], references: [id])
  userId                String
  project               Project      @relation(fields: [projectId], references: [id])
  projectId             String
  role                  Role
  status                UserRoleStatus @default(PENDING)
  acceptedAt            DateTime?
  invite                ProjectInvite? @relation(fields: [inviteId], references: [id])
  inviteId              String?
  // Scoping to departments; stores ordered list of department IDs user cares about
  departmentOrder       String[]     @default([])
  // Visibility/scope subset of departments for this role
  departmentScope       String[]     @default([])
  // New: Link to departments this role manages
  managedDepartments    Department[] @relation("DepartmentManagers")
  // New: Link to departments this role has access to
  accessibleDepartments Department[] @relation("DepartmentAccess")
  // New: Link to tasks assigned to this role
  assignedTasks         Task[]       @relation("RoleTaskAssignments")
  // New: Link to tasks created by this role (audit)
  createdTasks          Task[]       @relation("TasksCreatedByRole")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model Project {
  id              String                   @id @default(cuid())
  name            String                   @unique
  description     String?
  type            ProjectType
  priority        Priority                 @default(MEDIUM)
  budgetRange     String?
  // Escrow Payment Fields
  budgetAmount    Float?                   // Exact SIZCOIN amount for the project
  escrowAddress   String?                  // Algorand blockchain escrow account address
  escrowFunded    Boolean                  @default(false) // Whether escrow has been funded
  allocatedFunds  Float                    @default(0) // Total SIZCOIN allocated to tasks
  releasedFunds   Float                    @default(0) // Total SIZCOIN paid to employees
  startDate       DateTime
  endDate         DateTime
  color           String?
  owner           User                     @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId         String
  userRoles       UserRole[]
  departments     Department[]
  tags            ProjectTag[]
  invites         ProjectInvite[]
  // Escrow Relations
  escrow          ProjectEscrow?
  transactions    BlockchainTransaction[]
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
}

model ProjectTag {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())

  @@unique([name, projectId])
}

// Drafting removed

model ProjectInvite {
  id        String       @id @default(cuid())
  email     String
  role      Role
  status    InviteStatus @default(PENDING)
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  expiresAt DateTime
  userRoles UserRole[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Department {
  id              String         @id @default(cuid())
  name            String
  type            DepartmentType
  description     String?
  order           Int            @default(0)
  isVisible       Boolean        @default(true)
  color           String?
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       String
  // New: Link to UserRoles that manage this department
  managers        UserRole[]     @relation("DepartmentManagers")
  // New: Link to UserRoles that have access to this department
  accessibleRoles UserRole[]     @relation("DepartmentAccess")
  tasks           Task[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([name, projectId]) // Allow same name for different projects, but unique per project
}

model Task {
  id                  String                 @id @default(cuid())
  title               String
  description         String?
  status              TaskStatus             @default(PENDING)
  priority            Priority               @default(MEDIUM)
  department          Department             @relation(fields: [departmentId], references: [id])
  departmentId        String
  // New: Link to UserRole instead of directly to User
  assignedRole        UserRole?              @relation("RoleTaskAssignments", fields: [assignedRoleId], references: [id])
  assignedRoleId      String?
  // Keep the old relation for backward compatibility, but mark as deprecated
  assignedTo          User?                  @relation("EmployeeTasks", fields: [employeeId], references: [id])
  employeeId          String?
  // Timing fields for calendar/scheduling
  startDate           DateTime?
  dueDate             DateTime?
  endDate             DateTime?
  isAllDay            Boolean                @default(false)
  timeZone            String?
  // UX/Progress fields
  progress            Int                    @default(0)
  checklistCount      Int                    @default(0)
  checklistCompleted  Int                    @default(0)
  // Kanban-specific fields
  order               Int                    @default(0)
  estimatedHours      Float?
  // Payment Fields
  paymentAmount       Float?                 // SIZCOIN amount employee earns for this task
  paymentStatus       PaymentStatus          @default(PENDING)
  paidAt              DateTime?              // When payment was released
  paymentTxHash       String?                // Algorand transaction hash
  // Audit/visibility
  deletedAt           DateTime?
  createdByRole       UserRole?              @relation("TasksCreatedByRole", fields: [createdByRoleId], references: [id])
  createdByRoleId     String?
  payments            Payment[]
  activities          TaskActivity[]
  blockchainPayment   BlockchainTransaction?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt

  @@index([departmentId])
  @@index([assignedRoleId])
  @@index([dueDate])
  @@index([startDate])
  @@index([status])
  @@index([priority])
  @@index([status, order])
  @@index([paymentStatus])
}

model TaskActivity {
  id            String   @id @default(cuid())
  type          String   // STATUS_CHANGED, ASSIGNED, CREATED, etc
  description   String
  previousValue String?
  newValue      String?
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())

  @@index([taskId])
  @@index([createdAt])
}

model Payment {
  id         String        @id @default(cuid())
  amount     Float
  status     PaymentStatus @default(PENDING)
  task       Task          @relation(fields: [taskId], references: [id])
  taskId     String
  payer      User          @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId    String
  payee      User          @relation("PaymentsReceived", fields: [payeeId], references: [id])
  payeeId    String
  createdAt  DateTime      @default(now())
  releasedAt DateTime?
}

// Project templates removed

// New Models for Escrow Payment System

model ProjectEscrow {
  id                  String   @id @default(cuid())
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String   @unique // One escrow per project
  escrowAddress       String   @unique // Algorand public address
  encryptedPrivateKey String   // Encrypted private key (use KMS or crypto library)
  initialDeposit      Float    @default(0) // First deposit amount
  currentBalance      Float    @default(0) // Current balance in escrow
  status              String   @default("ACTIVE") // Values: ACTIVE, CLOSED, FROZEN
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model BlockchainTransaction {
  id            String    @id @default(cuid())
  txHash        String    @unique // Algorand transaction ID
  type          String    // Values: DEPOSIT, TASK_PAYMENT, REFUND, WITHDRAWAL
  amount        Float     // Amount in SIZCOIN
  fee           Float?    // Blockchain transaction fee
  fromAddress   String    // Sender wallet address
  toAddress     String    // Receiver wallet address
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     String
  task          Task?     @relation(fields: [taskId], references: [id])
  taskId        String?   @unique // One payment per task
  status        String    @default("PENDING") // Values: PENDING, CONFIRMED, FAILED
  blockNumber   BigInt?   // Blockchain block number
  confirmations Int       @default(0) // Number of confirmations
  note          String?   // Transaction memo
  errorMessage  String?   // If transaction failed
  submittedAt   DateTime
  confirmedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([projectId])
  @@index([taskId])
  @@index([status])
  @@index([type])
  @@index([fromAddress])
  @@index([toAddress])
}

model UserWallet {
  id            String    @id @default(cuid())
  userId        String    @unique // One wallet per user
  walletAddress String    @unique // Algorand address
  verified      Boolean   @default(false) // Wallet ownership verified
  verifiedAt    DateTime?
  signature     String?   // Verification signature
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Config {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}
