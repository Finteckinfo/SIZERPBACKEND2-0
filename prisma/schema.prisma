generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  PROJECT_OWNER
  PROJECT_MANAGER
  EMPLOYEE
}

enum ProjectType {
  PROGRESSIVE
  PARALLEL
}

enum DepartmentType {
  MAJOR
  MINOR
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum PaymentStatus {
  PENDING
  TIMELY
  PER_COMPLETION
  RELEASED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum UserRoleStatus {
  PENDING
  ACTIVE
  INACTIVE
}

//
// Models
//

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  firstName     String?
  lastName      String?
  avatarUrl     String?
  passwordHash  String?
  walletAddress String?
  roles         UserRole[]
  projectsOwned Project[]       @relation("OwnedProjects")
  // Remove the old managedDepts relation since departments now link to UserRoles
  tasksAssigned Task[]          @relation("EmployeeTasks")
  paymentsMade  Payment[]       @relation("PaymentsMade")
  paymentsRecv  Payment[]       @relation("PaymentsReceived")
  invites       ProjectInvite[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model UserRole {
  id                    String       @id @default(cuid())
  user                  User         @relation(fields: [userId], references: [id])
  userId                String
  project               Project      @relation(fields: [projectId], references: [id])
  projectId             String
  role                  Role
  status                UserRoleStatus @default(PENDING)
  acceptedAt            DateTime?
  invite                ProjectInvite? @relation(fields: [inviteId], references: [id])
  inviteId              String?
  // Scoping to departments; stores ordered list of department IDs user cares about
  departmentOrder       String[]     @default([])
  // Visibility/scope subset of departments for this role
  departmentScope       String[]     @default([])
  // New: Link to departments this role manages
  managedDepartments    Department[] @relation("DepartmentManagers")
  // New: Link to departments this role has access to
  accessibleDepartments Department[] @relation("DepartmentAccess")
  // New: Link to tasks assigned to this role
  assignedTasks         Task[]       @relation("RoleTaskAssignments")
  // New: Link to tasks created by this role (audit)
  createdTasks          Task[]       @relation("TasksCreatedByRole")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model Project {
  id          String          @id @default(cuid())
  name        String          @unique
  description String?
  type        ProjectType
  priority    Priority        @default(MEDIUM)
  budgetRange String?
  startDate   DateTime
  endDate     DateTime
  color       String?
  owner       User            @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId     String
  userRoles   UserRole[]
  departments Department[]
  tags        ProjectTag[]
  invites     ProjectInvite[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectTag {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())

  @@unique([name, projectId])
}

// Drafting removed

model ProjectInvite {
  id        String       @id @default(cuid())
  email     String
  role      Role
  status    InviteStatus @default(PENDING)
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  expiresAt DateTime
  userRoles UserRole[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Department {
  id              String         @id @default(cuid())
  name            String
  type            DepartmentType
  description     String?
  order           Int            @default(0)
  isVisible       Boolean        @default(true)
  color           String?
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       String
  // New: Link to UserRoles that manage this department
  managers        UserRole[]     @relation("DepartmentManagers")
  // New: Link to UserRoles that have access to this department
  accessibleRoles UserRole[]     @relation("DepartmentAccess")
  tasks           Task[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([name, projectId]) // Allow same name for different projects, but unique per project
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String?
  status         TaskStatus @default(PENDING)
  priority       Priority   @default(MEDIUM)
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String
  // New: Link to UserRole instead of directly to User
  assignedRole  UserRole?  @relation("RoleTaskAssignments", fields: [assignedRoleId], references: [id])
  assignedRoleId String?
  // Keep the old relation for backward compatibility, but mark as deprecated
  assignedTo    User?      @relation("EmployeeTasks", fields: [employeeId], references: [id])
  employeeId    String?
  // Timing fields for calendar/scheduling
  startDate     DateTime?
  dueDate       DateTime?
  endDate       DateTime?
  isAllDay      Boolean    @default(false)
  timeZone      String?
  // UX/Progress fields
  progress            Int       @default(0)
  checklistCount      Int       @default(0)
  checklistCompleted  Int       @default(0)
  // Audit/visibility
  deletedAt     DateTime?
  createdByRole UserRole?  @relation("TasksCreatedByRole", fields: [createdByRoleId], references: [id])
  createdByRoleId String?
  payments      Payment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([departmentId])
  @@index([assignedRoleId])
  @@index([dueDate])
  @@index([startDate])
  @@index([status])
  @@index([priority])
}

model Payment {
  id         String        @id @default(cuid())
  amount     Float
  status     PaymentStatus @default(PENDING)
  task       Task          @relation(fields: [taskId], references: [id])
  taskId     String
  payer      User          @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId    String
  payee      User          @relation("PaymentsReceived", fields: [payeeId], references: [id])
  payeeId    String
  createdAt  DateTime      @default(now())
  releasedAt DateTime?
}

// Project templates removed

model Config {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}
