generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  PROJECT_OWNER
  PROJECT_MANAGER
  EMPLOYEE
}

enum ProjectType {
  PROGRESSIVE
  PARALLEL
}

enum DepartmentType {
  MAJOR
  MINOR
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
}

enum PaymentStatus {
  PENDING
  TIMELY
  PER_COMPLETION
  RELEASED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

//
// Models
//

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  firstName      String?
  lastName       String?
  avatarUrl      String?
  passwordHash   String?
  walletAddress  String?
  roles          UserRole[]
  projectsOwned  Project[]    @relation("OwnedProjects")
  managedDepts   Department[] @relation("ManagedDepartments")
  tasksAssigned  Task[]       @relation("EmployeeTasks")
  paymentsMade   Payment[]    @relation("PaymentsMade")
  paymentsRecv   Payment[]    @relation("PaymentsReceived")
  invites        ProjectInvite[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      Role
  // Scoping to departments; stores ordered list of department IDs user cares about
  departmentOrder String[] @default([])
  // Visibility/scope subset of departments for this role
  departmentScope String[] @default([])
  createdAt DateTime @default(now())
}

model Project {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String?
  type           ProjectType
  priority       Priority     @default(MEDIUM)
  budgetRange    String?
  startDate      DateTime
  endDate        DateTime
  owner          User         @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId        String
  userRoles      UserRole[]
  departments    Department[]
  tags           ProjectTag[]
  invites        ProjectInvite[]
  drafts         ProjectDraft[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ProjectTag {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  
  @@unique([name, projectId])
}

model ProjectDraft {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  data      Json     // Stores the draft data as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectInvite {
  id        String       @id @default(cuid())
  email     String
  role      Role
  status    InviteStatus @default(PENDING)
  project   Project      @relation(fields: [projectId], references: [id])
  projectId String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  expiresAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Department {
  id             String        @id @default(cuid())
  name           String
  type           DepartmentType
  description    String?
  order          Int           @default(0)
  isVisible      Boolean       @default(true)
  project        Project?      @relation(fields: [projectId], references: [id])
  projectId      String?
  manager        User?         @relation("ManagedDepartments", fields: [managerId], references: [id])
  managerId      String?
  tasks          Task[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@unique([name, projectId]) // Allow same name for different projects, but unique per project
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus     @default(PENDING)
  department      Department?    @relation(fields: [departmentId], references: [id])
  departmentId    String?
  assignedTo      User?          @relation("EmployeeTasks", fields: [employeeId], references: [id])
  employeeId      String?
  payments        Payment[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  task          Task          @relation(fields: [taskId], references: [id])
  taskId        String
  payer         User          @relation("PaymentsMade", fields: [payerId], references: [id])
  payerId       String
  payee         User          @relation("PaymentsReceived", fields: [payeeId], references: [id])
  payeeId       String
  createdAt     DateTime      @default(now())
  releasedAt    DateTime?
}

model ProjectTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  structure   Json     // Stores template structure as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Config {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}
